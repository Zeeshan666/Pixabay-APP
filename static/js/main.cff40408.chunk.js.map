{"version":3,"sources":["Components/Navbar/Navbar.js","Components/imageResult/ImageResult.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","title","position","color","ImageResult","state","open","cuurentImg","handleOpen","img","_this","setState","currentImg","handleClose","_this2","this","imagelist","images","props","GridList","cols","map","tags","key","id","dwn","downloads","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","apidetails","data","download","hits","console","log","catch","err","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","imageResult_ImageResult","App","MuiThemeProvider_default","Components_Navbar_Navbar","Components_Search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAYeA,EARF,WACX,OAEIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,MAAM,YAAYC,SAAS,UAAUC,MAAM,kIC4E1CC,6MA1EfC,MAAM,CACJC,MAAK,EACLC,WAAW,MAGbC,WAAa,SAAAC,GACXC,EAAKC,SAAS,CAAEL,MAAM,EAAMM,WAAYH,OAG1CI,YAAc,WACZH,EAAKC,SAAS,CAAEL,MAAM,6EAEb,IAAAQ,EAAAC,KACPC,EAAW,GACRC,EAAWF,KAAKG,MAAhBD,OAGLD,EADCC,EAEHpB,EAAAC,EAAAC,cAACoB,EAAA,SAAD,CAAWC,KAAM,GACfH,EAAOI,IAAI,SAAAZ,GAAG,OACZZ,EAAAC,EAAAC,cAACoB,EAAA,SAAD,CAEUlB,MAAOQ,EAAIa,KACXC,IAAKd,EAAIe,GACTC,IAAKhB,EAAIiB,UACTC,SACE9B,EAAAC,EAAAC,cAAA,kBACKF,EAAAC,EAAAC,cAAA,cAASU,EAAImB,OAIpBC,WACEhC,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAYiC,QAAS,kBAAMjB,EAAKN,WAAWC,EAAIuB,iBAC7CnC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAQK,MAAM,YAIlBN,EAAAC,EAAAC,cAAA,OAAKmC,IAAKzB,EAAIuB,cAAeG,IAAI,SAOrC,KAEV,IAAMC,EAAU,CACdvC,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAYwC,MAAM,QAAQC,SAAS,EAAMR,QAAShB,KAAKF,eAGrD,OACEhB,EAAAC,EAAAC,cAAA,WACGiB,EAEDnB,EAAAC,EAAAC,cAACyC,EAAA1C,EAAD,CACEsC,QAASA,EACTK,OAAO,EACPnC,KAAMS,KAAKV,MAAMC,KACjBoC,eAAgB3B,KAAKF,aAGrBhB,EAAAC,EAAAC,cAAA,OAAKmC,IAAKnB,KAAKV,MAAMO,WAAYuB,IAAI,GAAGQ,MAAO,CAAEC,MAAO,mBA9DvCC,mFC6EZC,6MA5EdzC,MAAM,CACF0C,WAAW,GACXC,OAAO,GACPC,OAAO,0BACPC,OAAO,qCACPjC,OAAO,MAGZkC,aAAa,SAACC,GACV,IAAMC,EAAMD,EAAEE,OAAOC,MACrB7C,EAAKC,SAAL6C,OAAAC,EAAA,EAAAD,CAAA,GAAgBJ,EAAEE,OAAOI,KAAML,GAC3B,WACc,IAALA,EACD3C,EAAKC,SAAS,CACVM,OAAO,KAKX0C,IAAMC,IAAN,GAAAC,OAAanD,EAAKL,MAAM4C,OAAxB,UAAAY,OAAuCnD,EAAKL,MAAM6C,OAAlD,OAAAW,OAA8DnD,EAAKL,MAAM0C,WAAzE,iDAAAc,OAC6BnD,EAAKL,MAAM2C,OADxC,qBAEAc,KAAK,SAAAC,GACJ,IAAMC,EAAaD,EAAIE,KACjBC,EAAWH,EAAIE,KAAKE,KAAK,GAAGzC,UAE1BT,EAAQ8C,EAAIE,KAAKE,KACxBC,QAAQC,IAAIH,EAASF,GAEnBtD,EAAKC,SAAS,CAACM,aAEvBqD,MAAM,SAAAC,GAAG,OAAEH,QAAQC,IAAIE,UAOnCC,eAAe,SAACpB,EAAEqB,EAAMlB,GACpB7C,EAAKC,SAAS,CACVqC,OAAOO,6EAQX,OADEa,QAAQC,IAAItD,KAAKV,MAAMY,QAEvBpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,CACA4D,KAAK,aACLH,MAAOxC,KAAKV,MAAM0C,WAClB4B,SAAU5D,KAAKoC,aACfyB,kBAAkB,gBAClBC,WAAW,IAEXhF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CACE4D,KAAK,SACLkB,kBAAkB,SAClBrB,MAAOxC,KAAKV,MAAM2C,OAClB2B,SAAU5D,KAAKyD,gBAEf3E,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAUyD,MAAO,EAAGyB,YAAY,MAChCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAUyD,MAAO,GAAIyB,YAAY,OACjCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAUyD,MAAO,GAAIyB,YAAY,OACjCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAUyD,MAAO,GAAIyB,YAAY,OACjCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAUyD,MAAO,GAAIyB,YAAY,QAEjCnF,EAAAC,EAAAC,cAAA,WACCgB,KAAKV,MAAMY,OAAOgE,OAAQ,EAC1BpF,EAAAC,EAAAC,cAACmF,EAAD,CAAahB,SAAUnD,KAAKV,MAAMY,OAAQA,OAAQF,KAAKV,MAAMY,SAAa,aAzEhE4B,aCcNsC,mLAbX,OACEtF,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,KACED,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsF,EAAD,MACFxF,EAAAC,EAAAC,cAACuF,EAAD,eANYzC,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.cff40408.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar'\r\n\r\n\r\nconst Navbar=()=> {\r\n  return (\r\n    \r\n      <AppBar title='image app' position='static ' color=\"secondary\" />\r\n    \r\n  )\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {GridList,GridTile} from 'material-ui/GridList'\r\nimport IconButton from 'material-ui/IconButton'\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\r\nimport Dailog from 'material-ui/Dialog'\r\nimport FlatButton   from 'material-ui/FlatButton';\r\n\r\n class ImageResult extends Component {\r\nstate={\r\n  open:false,\r\n  cuurentImg:''\r\n\r\n}\r\nhandleOpen = img => {\r\n  this.setState({ open: true, currentImg: img });\r\n};\r\n\r\nhandleClose = () => {\r\n  this.setState({ open: false });\r\n};\r\n  render() {\r\nlet imagelist =\"\";\r\nconst {images } = this.props;\r\n\r\nif(images){\r\n  imagelist=(\r\n<GridList  cols={3}>{\r\n  images.map(img=>(\r\n    <GridTile\r\n    \r\n              title={img.tags}\r\n              key={img.id}\r\n              dwn={img.downloads}\r\n              subtitle={\r\n                <span>\r\n                  by <strong>{img.user}</strong>\r\n                </span>\r\n              }\r\n              \r\n              actionIcon={\r\n                <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                  <ZoomIn color=\"white\" />\r\n                </IconButton>\r\n              }\r\n            >\r\n              <img src={img.largeImageURL} alt=\"\" />\r\n            </GridTile>\r\n  ))\r\n}\r\n</GridList>\r\n )\r\n}else{\r\nimagelist=null\r\n}\r\nconst actions = [\r\n  <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\r\n];\r\n\r\n    return (\r\n      <div>\r\n        {imagelist}\r\n        \r\n        <Dailog\r\n          actions={actions}\r\n          modal={false}\r\n          open={this.state.open}\r\n          onRequestClose={this.handleClose}\r\n          \r\n        >\r\n          <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\r\n        </Dailog>\r\n      </div>\r\n    )\r\n  }\r\n\r\n \r\n}\r\n\r\nImageResult.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ImageResult","import React, { Component } from 'react'\r\nimport ImageResult from '../imageResult/ImageResult';\r\nimport Textfield from 'material-ui/TextField'\r\nimport Selectfield from 'material-ui/SelectField'\r\nimport MenuItem from 'material-ui/MenuItem';\r\n\r\nimport axios from 'axios';\r\nclass Search extends Component {\r\n\r\n state={\r\n     searchText:'',\r\n     amount:15,\r\n     apiUrl:'https://pixabay.com/api',\r\n     apiKey:'11556831-3c3f3b7d842037f70e6f60d96',\r\n     images:[]\r\n }\r\n \r\nonTextChange=(e)=>{\r\n    const val = e.target.value;\r\n    this.setState({[e.target.name]:val\r\n    },  ()=>{\r\n              if(val==''){\r\n                this.setState({\r\n                    images:[]\r\n                })\r\n\r\n            }\r\n            else{\r\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}\r\n                &image_type=photo&per_page=${this.state.amount}&safesearch=true`).\r\n                then(res=>{\r\n                 const apidetails = res.data;\r\n                 const download = res.data.hits[3].downloads;\r\n\r\n                  const  images =res.data.hits;\r\n                  console.log(download,apidetails)\r\n\r\n                    this.setState({images  })\r\n                })\r\n           .catch(err=>console.log(err))\r\n\r\n            }\r\n           \r\n    })\r\n\r\n};\r\nonAmountChange=(e,index,value)=>{\r\n    this.setState({\r\n        amount:value\r\n    })\r\n\r\n}\r\n\r\n  render() {\r\n     \r\n      console.log(this.state.images)\r\n    return (\r\n      <div>\r\n        <Textfield\r\n        name=\"searchText\"\r\n        value={this.state.searchText}\r\n        onChange={this.onTextChange}\r\n        floatingLabelText='search images'\r\n        fullWidth={true}\r\n        />\r\n        <br/>\r\n        <Selectfield\r\n          name=\"amount\"\r\n          floatingLabelText=\"Amount\"\r\n          value={this.state.amount}\r\n          onChange={this.onAmountChange}\r\n        >\r\n          <MenuItem value={5} primaryText=\"5\" />\r\n          <MenuItem value={10} primaryText=\"10\" />\r\n          <MenuItem value={15} primaryText=\"15\" />\r\n          <MenuItem value={30} primaryText=\"30\" />\r\n          <MenuItem value={50} primaryText=\"50\" />\r\n        </Selectfield>\r\n          <br/>\r\n          {this.state.images.length >0 ?\r\n         ( <ImageResult download={this.state.images} images={this.state.images}/> ): null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Search\r\n","import React, { Component } from 'react';\nimport Navbar from './Components/Navbar/Navbar'\nimport MuithemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport './App.css';\nimport Search from './Components/Search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuithemeProvider>\n        <div>\n        <Navbar />\n      <Search/>\n        </div>\n  \n      </MuithemeProvider>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}